// <auto-generated /> 
#nullable enable

using JMESPath;

public class Indices
{

    [Theory]
    [InlineData(
"""
foo.bar[0]
""",
"""
zero
""")]
    [InlineData(
"""
foo.bar[1]
""",
"""
one
""")]
    [InlineData(
"""
foo.bar[2]
""",
"""
two
""")]
    [InlineData(
"""
foo.bar[3]
""",
"""

""")]
    [InlineData(
"""
foo.bar[-1]
""",
"""
two
""")]
    [InlineData(
"""
foo.bar[-2]
""",
"""
one
""")]
    [InlineData(
"""
foo.bar[-3]
""",
"""
zero
""")]
    [InlineData(
"""
foo.bar[-4]
""",
"""

""")]
    public void Test_1(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": {
    "bar": [
      "zero",
      "one",
      "two"
    ]
  }
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo.bar
""",
"""

""")]
    [InlineData(
"""
foo[0].bar
""",
"""
one
""")]
    [InlineData(
"""
foo[1].bar
""",
"""
two
""")]
    [InlineData(
"""
foo[2].bar
""",
"""
three
""")]
    [InlineData(
"""
foo[3].notbar
""",
"""
four
""")]
    [InlineData(
"""
foo[3].bar
""",
"""

""")]
    [InlineData(
"""
foo[0]
""",
"""
{
  "bar": "one"
}
""")]
    [InlineData(
"""
foo[1]
""",
"""
{
  "bar": "two"
}
""")]
    [InlineData(
"""
foo[2]
""",
"""
{
  "bar": "three"
}
""")]
    [InlineData(
"""
foo[3]
""",
"""
{
  "notbar": "four"
}
""")]
    [InlineData(
"""
foo[4]
""",
"""

""")]
    public void Test_2(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": [
    {
      "bar": "one"
    },
    {
      "bar": "two"
    },
    {
      "bar": "three"
    },
    {
      "notbar": "four"
    }
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
[0]
""",
"""
one
""")]
    [InlineData(
"""
[1]
""",
"""
two
""")]
    [InlineData(
"""
[2]
""",
"""
three
""")]
    [InlineData(
"""
[-1]
""",
"""
three
""")]
    [InlineData(
"""
[-2]
""",
"""
two
""")]
    [InlineData(
"""
[-3]
""",
"""
one
""")]
    public void Test_3(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
[
  "one",
  "two",
  "three"
]
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
reservations[].instances[].foo
""",
"""
[
  1,
  2
]
""")]
    [InlineData(
"""
reservations[].instances[].bar
""",
"""
[]
""")]
    [InlineData(
"""
reservations[].notinstances[].foo
""",
"""
[]
""")]
    [InlineData(
"""
reservations[].notinstances[].foo
""",
"""
[]
""")]
    public void Test_4(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "reservations": [
    {
      "instances": [
        {
          "foo": 1
        },
        {
          "foo": 2
        }
      ]
    }
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
reservations[].instances[].foo[].bar
""",
"""
[
  1,
  2,
  4,
  5,
  6,
  8
]
""")]
    [InlineData(
"""
reservations[].instances[].foo[].baz
""",
"""
[]
""")]
    [InlineData(
"""
reservations[].instances[].notfoo[].bar
""",
"""
[
  20,
  21,
  22,
  23,
  24,
  25
]
""")]
    [InlineData(
"""
reservations[].instances[].notfoo[].notbar
""",
"""
[
  [
    7
  ],
  [
    7
  ]
]
""")]
    [InlineData(
"""
reservations[].notinstances[].foo
""",
"""
[]
""")]
    [InlineData(
"""
reservations[].instances[].foo[].notbar
""",
"""
[
  3,
  [
    7
  ]
]
""")]
    [InlineData(
"""
reservations[].instances[].bar[].baz
""",
"""
[
  [
    1
  ],
  [
    2
  ],
  [
    3
  ],
  [
    4
  ]
]
""")]
    [InlineData(
"""
reservations[].instances[].baz[].baz
""",
"""
[
  [
    1,
    2
  ],
  [],
  [],
  [
    3,
    4
  ]
]
""")]
    [InlineData(
"""
reservations[].instances[].qux[].baz
""",
"""
[
  [],
  [
    1,
    2,
    3
  ],
  [
    4
  ],
  [],
  [],
  [
    1,
    2,
    3
  ],
  [
    4
  ],
  []
]
""")]
    [InlineData(
"""
reservations[].instances[].qux[].baz[]
""",
"""
[
  1,
  2,
  3,
  4,
  1,
  2,
  3,
  4
]
""")]
    public void Test_5(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "reservations": [
    {
      "instances": [
        {
          "foo": [
            {
              "bar": 1
            },
            {
              "bar": 2
            },
            {
              "notbar": 3
            },
            {
              "bar": 4
            }
          ]
        },
        {
          "foo": [
            {
              "bar": 5
            },
            {
              "bar": 6
            },
            {
              "notbar": [
                7
              ]
            },
            {
              "bar": 8
            }
          ]
        },
        {
          "foo": "bar"
        },
        {
          "notfoo": [
            {
              "bar": 20
            },
            {
              "bar": 21
            },
            {
              "notbar": [
                7
              ]
            },
            {
              "bar": 22
            }
          ]
        },
        {
          "bar": [
            {
              "baz": [
                1
              ]
            },
            {
              "baz": [
                2
              ]
            },
            {
              "baz": [
                3
              ]
            },
            {
              "baz": [
                4
              ]
            }
          ]
        },
        {
          "baz": [
            {
              "baz": [
                1,
                2
              ]
            },
            {
              "baz": []
            },
            {
              "baz": []
            },
            {
              "baz": [
                3,
                4
              ]
            }
          ]
        },
        {
          "qux": [
            {
              "baz": []
            },
            {
              "baz": [
                1,
                2,
                3
              ]
            },
            {
              "baz": [
                4
              ]
            },
            {
              "baz": []
            }
          ]
        }
      ],
      "otherkey": {
        "foo": [
          {
            "bar": 1
          },
          {
            "bar": 2
          },
          {
            "notbar": 3
          },
          {
            "bar": 4
          }
        ]
      }
    },
    {
      "instances": [
        {
          "a": [
            {
              "bar": 1
            },
            {
              "bar": 2
            },
            {
              "notbar": 3
            },
            {
              "bar": 4
            }
          ]
        },
        {
          "b": [
            {
              "bar": 5
            },
            {
              "bar": 6
            },
            {
              "notbar": [
                7
              ]
            },
            {
              "bar": 8
            }
          ]
        },
        {
          "c": "bar"
        },
        {
          "notfoo": [
            {
              "bar": 23
            },
            {
              "bar": 24
            },
            {
              "notbar": [
                7
              ]
            },
            {
              "bar": 25
            }
          ]
        },
        {
          "qux": [
            {
              "baz": []
            },
            {
              "baz": [
                1,
                2,
                3
              ]
            },
            {
              "baz": [
                4
              ]
            },
            {
              "baz": []
            }
          ]
        }
      ],
      "otherkey": {
        "foo": [
          {
            "bar": 1
          },
          {
            "bar": 2
          },
          {
            "notbar": 3
          },
          {
            "bar": 4
          }
        ]
      }
    }
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo[]
""",
"""
[
  [
    "one",
    "two"
  ],
  [
    "three",
    "four"
  ],
  [
    "five",
    "six"
  ],
  [
    "seven",
    "eight"
  ],
  [
    "nine"
  ],
  [
    "ten"
  ]
]
""")]
    [InlineData(
"""
foo[][0]
""",
"""
[
  "one",
  "three",
  "five",
  "seven",
  "nine",
  "ten"
]
""")]
    [InlineData(
"""
foo[][1]
""",
"""
[
  "two",
  "four",
  "six",
  "eight"
]
""")]
    [InlineData(
"""
foo[][0][0]
""",
"""
[]
""")]
    [InlineData(
"""
foo[][2][2]
""",
"""
[]
""")]
    [InlineData(
"""
foo[][0][0][100]
""",
"""
[]
""")]
    public void Test_6(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": [
    [
      [
        "one",
        "two"
      ],
      [
        "three",
        "four"
      ]
    ],
    [
      [
        "five",
        "six"
      ],
      [
        "seven",
        "eight"
      ]
    ],
    [
      [
        "nine"
      ],
      [
        "ten"
      ]
    ]
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo
""",
"""
[
  {
    "bar": [
      {
        "qux": 2,
        "baz": 1
      },
      {
        "qux": 4,
        "baz": 3
      }
    ]
  },
  {
    "bar": [
      {
        "qux": 6,
        "baz": 5
      },
      {
        "qux": 8,
        "baz": 7
      }
    ]
  }
]
""")]
    [InlineData(
"""
foo[]
""",
"""
[
  {
    "bar": [
      {
        "qux": 2,
        "baz": 1
      },
      {
        "qux": 4,
        "baz": 3
      }
    ]
  },
  {
    "bar": [
      {
        "qux": 6,
        "baz": 5
      },
      {
        "qux": 8,
        "baz": 7
      }
    ]
  }
]
""")]
    [InlineData(
"""
foo[].bar
""",
"""
[
  [
    {
      "qux": 2,
      "baz": 1
    },
    {
      "qux": 4,
      "baz": 3
    }
  ],
  [
    {
      "qux": 6,
      "baz": 5
    },
    {
      "qux": 8,
      "baz": 7
    }
  ]
]
""")]
    [InlineData(
"""
foo[].bar[]
""",
"""
[
  {
    "qux": 2,
    "baz": 1
  },
  {
    "qux": 4,
    "baz": 3
  },
  {
    "qux": 6,
    "baz": 5
  },
  {
    "qux": 8,
    "baz": 7
  }
]
""")]
    [InlineData(
"""
foo[].bar[].baz
""",
"""
[
  1,
  3,
  5,
  7
]
""")]
    public void Test_7(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": [
    {
      "bar": [
        {
          "qux": 2,
          "baz": 1
        },
        {
          "qux": 4,
          "baz": 3
        }
      ]
    },
    {
      "bar": [
        {
          "qux": 6,
          "baz": 5
        },
        {
          "qux": 8,
          "baz": 7
        }
      ]
    }
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
string[]
""",
"""

""")]
    [InlineData(
"""
hash[]
""",
"""

""")]
    [InlineData(
"""
number[]
""",
"""

""")]
    [InlineData(
"""
nullvalue[]
""",
"""

""")]
    [InlineData(
"""
string[].foo
""",
"""

""")]
    [InlineData(
"""
hash[].foo
""",
"""

""")]
    [InlineData(
"""
number[].foo
""",
"""

""")]
    [InlineData(
"""
nullvalue[].foo
""",
"""

""")]
    [InlineData(
"""
nullvalue[].foo[].bar
""",
"""

""")]
    public void Test_8(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "string": "string",
  "hash": {
    "foo": "bar",
    "bar": "baz"
  },
  "number": 23,
  "nullvalue": null
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

}