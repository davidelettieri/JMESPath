// <auto-generated /> 
#nullable enable

using JMESPath;

public class Boolean
{

    [Theory]
    [InlineData(
"""
outer.foo || outer.bar
""",
"""
foo
""")]
    [InlineData(
"""
outer.foo||outer.bar
""",
"""
foo
""")]
    [InlineData(
"""
outer.bar || outer.baz
""",
"""
bar
""")]
    [InlineData(
"""
outer.bar||outer.baz
""",
"""
bar
""")]
    [InlineData(
"""
outer.bad || outer.foo
""",
"""
foo
""")]
    [InlineData(
"""
outer.bad||outer.foo
""",
"""
foo
""")]
    [InlineData(
"""
outer.foo || outer.bad
""",
"""
foo
""")]
    [InlineData(
"""
outer.foo||outer.bad
""",
"""
foo
""")]
    [InlineData(
"""
outer.bad || outer.alsobad
""",
"""

""")]
    [InlineData(
"""
outer.bad||outer.alsobad
""",
"""

""")]
    public void Test_1(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "outer": {
    "foo": "foo",
    "bar": "bar",
    "baz": "baz"
  }
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
outer.empty_string || outer.foo
""",
"""
foo
""")]
    [InlineData(
"""
outer.nokey || outer.bool || outer.empty_list || outer.empty_string || outer.foo
""",
"""
foo
""")]
    public void Test_2(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "outer": {
    "foo": "foo",
    "bool": false,
    "empty_list": [],
    "empty_string": ""
  }
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
True && False
""",
"""
false
""")]
    [InlineData(
"""
False && True
""",
"""
false
""")]
    [InlineData(
"""
True && True
""",
"""
true
""")]
    [InlineData(
"""
False && False
""",
"""
false
""")]
    [InlineData(
"""
True && Number
""",
"""
5
""")]
    [InlineData(
"""
Number && True
""",
"""
true
""")]
    [InlineData(
"""
Number && False
""",
"""
false
""")]
    [InlineData(
"""
Number && EmptyList
""",
"""
[]
""")]
    [InlineData(
"""
Number && True
""",
"""
true
""")]
    [InlineData(
"""
EmptyList && True
""",
"""
[]
""")]
    [InlineData(
"""
EmptyList && False
""",
"""
[]
""")]
    [InlineData(
"""
True || False
""",
"""
true
""")]
    [InlineData(
"""
True || True
""",
"""
true
""")]
    [InlineData(
"""
False || True
""",
"""
true
""")]
    [InlineData(
"""
False || False
""",
"""
false
""")]
    [InlineData(
"""
Number || EmptyList
""",
"""
5
""")]
    [InlineData(
"""
Number || True
""",
"""
5
""")]
    [InlineData(
"""
Number || True && False
""",
"""
5
""")]
    [InlineData(
"""
(Number || True) && False
""",
"""
false
""")]
    [InlineData(
"""
Number || (True && False)
""",
"""
5
""")]
    [InlineData(
"""
!True
""",
"""
false
""")]
    [InlineData(
"""
!False
""",
"""
true
""")]
    [InlineData(
"""
!Number
""",
"""
false
""")]
    [InlineData(
"""
!EmptyList
""",
"""
true
""")]
    [InlineData(
"""
True && !False
""",
"""
true
""")]
    [InlineData(
"""
True && !EmptyList
""",
"""
true
""")]
    [InlineData(
"""
!False && !EmptyList
""",
"""
true
""")]
    [InlineData(
"""
!True && False
""",
"""
false
""")]
    [InlineData(
"""
!(True && False)
""",
"""
true
""")]
    [InlineData(
"""
!Zero
""",
"""
false
""")]
    [InlineData(
"""
!!Zero
""",
"""
true
""")]
    [InlineData(
"""
Zero || Number
""",
"""
0
""")]
    [InlineData(
"""
ZeroFloat || Number
""",
"""
0.0
""")]
    public void Test_3(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "True": true,
  "False": false,
  "Number": 5,
  "EmptyList": [],
  "Zero": 0,
  "ZeroFloat": 0.0
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
one < two
""",
"""
true
""")]
    [InlineData(
"""
one <= two
""",
"""
true
""")]
    [InlineData(
"""
one == one
""",
"""
true
""")]
    [InlineData(
"""
one == two
""",
"""
false
""")]
    [InlineData(
"""
one > two
""",
"""
false
""")]
    [InlineData(
"""
one >= two
""",
"""
false
""")]
    [InlineData(
"""
one != two
""",
"""
true
""")]
    [InlineData(
"""
emptylist < one
""",
"""

""")]
    [InlineData(
"""
emptylist < nullvalue
""",
"""

""")]
    [InlineData(
"""
emptylist < boolvalue
""",
"""

""")]
    [InlineData(
"""
one < boolvalue
""",
"""

""")]
    [InlineData(
"""
one < two && three > one
""",
"""
true
""")]
    [InlineData(
"""
one < two || three > one
""",
"""
true
""")]
    [InlineData(
"""
one < two || three < one
""",
"""
true
""")]
    [InlineData(
"""
two < one || three < one
""",
"""
false
""")]
    public void Test_4(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "one": 1,
  "two": 2,
  "three": 3,
  "emptylist": [],
  "boolvalue": false
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

}