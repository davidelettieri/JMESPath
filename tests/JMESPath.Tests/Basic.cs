// <auto-generated /> 
#nullable enable

using JMESPath;

public class Basic
{

    [Theory]
    [InlineData(
"""
foo
""",
"""
{
  "bar": {
    "baz": "correct"
  }
}
""")]
    [InlineData(
"""
foo.bar
""",
"""
{
  "baz": "correct"
}
""")]
    [InlineData(
"""
foo.bar.baz
""",
"""
correct
""")]
    [InlineData(
"""
foo
.
bar
.baz
""",
"""
correct
""")]
    [InlineData(
"""
foo.bar.baz.bad
""",
"""

""")]
    [InlineData(
"""
foo.bar.bad
""",
"""

""")]
    [InlineData(
"""
foo.bad
""",
"""

""")]
    [InlineData(
"""
bad
""",
"""

""")]
    [InlineData(
"""
bad.morebad.morebad
""",
"""

""")]
    public void Test_1(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": {
    "bar": {
      "baz": "correct"
    }
  }
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo
""",
"""
{
  "bar": [
    "one",
    "two",
    "three"
  ]
}
""")]
    [InlineData(
"""
foo.bar
""",
"""
[
  "one",
  "two",
  "three"
]
""")]
    public void Test_2(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": {
    "bar": [
      "one",
      "two",
      "three"
    ]
  }
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
one
""",
"""

""")]
    [InlineData(
"""
two
""",
"""

""")]
    [InlineData(
"""
three
""",
"""

""")]
    [InlineData(
"""
one.two
""",
"""

""")]
    public void Test_3(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
[
  "one",
  "two",
  "three"
]
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo."1"
""",
"""
[
  "one",
  "two",
  "three"
]
""")]
    [InlineData(
"""
foo."1"[0]
""",
"""
one
""")]
    [InlineData(
"""
foo."-1"
""",
"""
bar
""")]
    public void Test_4(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": {
    "1": [
      "one",
      "two",
      "three"
    ],
    "-1": "bar"
  }
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

}