// <auto-generated /> 
#nullable enable

using JMESPath;

public class Syntax
{

    [Theory]
    [InlineData(
"""
foo.bar
""",
"""

""")]
    [InlineData(
"""
foo
""",
"""

""")]
    [InlineData(
"""
foo.1
""",
"""

""")]
    [InlineData(
"""
foo.-11
""",
"""

""")]
    [InlineData(
"""
foo.
""",
"""

""")]
    [InlineData(
"""
.foo
""",
"""

""")]
    [InlineData(
"""
foo..bar
""",
"""

""")]
    [InlineData(
"""
foo.bar.
""",
"""

""")]
    [InlineData(
"""
foo[.]
""",
"""

""")]
    public void Test_1(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "type": "object"
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
.
""",
"""

""")]
    [InlineData(
"""
:
""",
"""

""")]
    [InlineData(
"""
,
""",
"""

""")]
    [InlineData(
"""
]
""",
"""

""")]
    [InlineData(
"""
[
""",
"""

""")]
    [InlineData(
"""
}
""",
"""

""")]
    [InlineData(
"""
{
""",
"""

""")]
    [InlineData(
"""
)
""",
"""

""")]
    [InlineData(
"""
(
""",
"""

""")]
    [InlineData(
"""
((&
""",
"""

""")]
    [InlineData(
"""
a[
""",
"""

""")]
    [InlineData(
"""
a]
""",
"""

""")]
    [InlineData(
"""
a][
""",
"""

""")]
    [InlineData(
"""
!
""",
"""

""")]
    [InlineData(
"""
@=
""",
"""

""")]
    [InlineData(
"""
@``
""",
"""

""")]
    public void Test_2(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "type": "object"
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
![!(!
""",
"""

""")]
    public void Test_3(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "type": "object"
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
(@
""",
"""

""")]
    public void Test_4(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
@(foo)
""",
"""

""")]
    [InlineData(
"""
"foo"(bar)
""",
"""

""")]
    public void Test_5(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
*
""",
"""
[
  "object"
]
""")]
    [InlineData(
"""
*.*
""",
"""
[]
""")]
    [InlineData(
"""
*.foo
""",
"""
[]
""")]
    [InlineData(
"""
*[0]
""",
"""
[]
""")]
    [InlineData(
"""
.*
""",
"""

""")]
    [InlineData(
"""
*foo
""",
"""

""")]
    [InlineData(
"""
*0
""",
"""

""")]
    [InlineData(
"""
foo[*]bar
""",
"""

""")]
    [InlineData(
"""
foo[*]*
""",
"""

""")]
    public void Test_6(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "type": "object"
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
[]
""",
"""

""")]
    public void Test_7(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "type": "object"
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
[0]
""",
"""

""")]
    [InlineData(
"""
[*]
""",
"""

""")]
    [InlineData(
"""
*.[0]
""",
"""

""")]
    [InlineData(
"""
*.["0"]
""",
"""
[
  [
    null
  ]
]
""")]
    [InlineData(
"""
[*].bar
""",
"""

""")]
    [InlineData(
"""
[*][0]
""",
"""

""")]
    [InlineData(
"""
foo[#]
""",
"""

""")]
    [InlineData(
"""
led[*
""",
"""

""")]
    public void Test_8(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "type": "object"
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
[:@]
""",
"""

""")]
    [InlineData(
"""
[:::]
""",
"""

""")]
    [InlineData(
"""
[:@:]
""",
"""

""")]
    [InlineData(
"""
[:1@]
""",
"""

""")]
    public void Test_9(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo[0]
""",
"""

""")]
    [InlineData(
"""
foo[0, 1]
""",
"""

""")]
    [InlineData(
"""
foo.[0]
""",
"""

""")]
    [InlineData(
"""
foo.[*]
""",
"""

""")]
    [InlineData(
"""
foo[0, ]
""",
"""

""")]
    [InlineData(
"""
foo[0,
""",
"""

""")]
    [InlineData(
"""
foo.[a
""",
"""

""")]
    [InlineData(
"""
foo[0,, 1]
""",
"""

""")]
    [InlineData(
"""
foo[abc]
""",
"""

""")]
    [InlineData(
"""
foo[abc, def]
""",
"""

""")]
    [InlineData(
"""
foo[abc, 1]
""",
"""

""")]
    [InlineData(
"""
foo[abc, ]
""",
"""

""")]
    [InlineData(
"""
foo.[abc]
""",
"""

""")]
    [InlineData(
"""
foo.[abc, def]
""",
"""

""")]
    [InlineData(
"""
foo.[abc, 1]
""",
"""

""")]
    [InlineData(
"""
foo.[abc, ]
""",
"""

""")]
    [InlineData(
"""
foo.[abc,, def]
""",
"""

""")]
    [InlineData(
"""
foo.[0, 1]
""",
"""

""")]
    public void Test_10(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "type": "object"
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
a{}
""",
"""

""")]
    [InlineData(
"""
a{
""",
"""

""")]
    [InlineData(
"""
a{foo}
""",
"""

""")]
    [InlineData(
"""
a{foo:
""",
"""

""")]
    [InlineData(
"""
a{foo: 0
""",
"""

""")]
    [InlineData(
"""
a{foo:}
""",
"""

""")]
    [InlineData(
"""
a{foo: 0, 
""",
"""

""")]
    [InlineData(
"""
a{foo: ,}
""",
"""

""")]
    [InlineData(
"""
a{foo: bar}
""",
"""

""")]
    [InlineData(
"""
a{foo: 0}
""",
"""

""")]
    [InlineData(
"""
a.{}
""",
"""

""")]
    [InlineData(
"""
a.{foo}
""",
"""

""")]
    [InlineData(
"""
a.{foo:}
""",
"""

""")]
    [InlineData(
"""
a.{foo: ,}
""",
"""

""")]
    [InlineData(
"""
a.{foo: bar}
""",
"""

""")]
    [InlineData(
"""
a.{foo: bar, baz: bam}
""",
"""

""")]
    [InlineData(
"""
a.{foo: bar, }
""",
"""

""")]
    [InlineData(
"""
a.{foo: bar, baz}
""",
"""

""")]
    [InlineData(
"""
a.{foo: bar, baz:}
""",
"""

""")]
    [InlineData(
"""
a.{foo: bar, baz: bam, }
""",
"""

""")]
    [InlineData(
"""
{"\\":{" ":*}}
""",
"""
{
  "\\": {
    " ": [
      "object"
    ]
  }
}
""")]
    [InlineData(
"""
{a: @
""",
"""

""")]
    public void Test_11(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "type": "object"
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo || bar
""",
"""

""")]
    [InlineData(
"""
foo ||
""",
"""

""")]
    [InlineData(
"""
foo.|| bar
""",
"""

""")]
    [InlineData(
"""
 || foo
""",
"""

""")]
    [InlineData(
"""
foo || || foo
""",
"""

""")]
    [InlineData(
"""
foo.[a || b]
""",
"""

""")]
    [InlineData(
"""
foo.[a ||]
""",
"""

""")]
    [InlineData(
"""
"foo
""",
"""

""")]
    public void Test_12(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "type": "object"
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo[?bar==`"baz"`]
""",
"""

""")]
    [InlineData(
"""
foo[? bar == `"baz"` ]
""",
"""

""")]
    [InlineData(
"""
foo[ ?bar==`"baz"`]
""",
"""

""")]
    [InlineData(
"""
foo[?bar==]
""",
"""

""")]
    [InlineData(
"""
foo[?==]
""",
"""

""")]
    [InlineData(
"""
foo[?==bar]
""",
"""

""")]
    [InlineData(
"""
foo[?bar==baz?]
""",
"""

""")]
    [InlineData(
"""
foo[?a.b.c==d.e.f]
""",
"""

""")]
    [InlineData(
"""
foo[?bar==`[0, 1, 2]`]
""",
"""

""")]
    [InlineData(
"""
foo[?bar==`["a", "b", "c"]`]
""",
"""

""")]
    [InlineData(
"""
foo[?bar==`["foo`bar"]`]
""",
"""

""")]
    [InlineData(
"""
foo[?bar==`["foo\`bar"]`]
""",
"""

""")]
    [InlineData(
"""
foo[?bar<>baz]
""",
"""

""")]
    [InlineData(
"""
foo[?bar^baz]
""",
"""

""")]
    [InlineData(
"""
foo[bar==baz]
""",
"""

""")]
    [InlineData(
"""
[?"\\">`"foo"`]
""",
"""

""")]
    [InlineData(
"""
[?"\\" > `"foo"`]
""",
"""

""")]
    public void Test_13(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "type": "object"
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
bar.`"anything"`
""",
"""

""")]
    [InlineData(
"""
bar.baz.noexists.`"literal"`
""",
"""

""")]
    [InlineData(
"""
foo[*].`"literal"`
""",
"""

""")]
    [InlineData(
"""
foo[*].name.`"literal"`
""",
"""

""")]
    [InlineData(
"""
foo[].name.`"literal"`
""",
"""

""")]
    [InlineData(
"""
foo[].name.`"literal"`.`"subliteral"`
""",
"""

""")]
    [InlineData(
"""
foo[*].name.noexist.`"literal"`
""",
"""

""")]
    [InlineData(
"""
foo[].name.noexist.`"literal"`
""",
"""

""")]
    [InlineData(
"""
twolen[*].`"foo"`
""",
"""

""")]
    [InlineData(
"""
twolen[*].threelen[*].`"bar"`
""",
"""

""")]
    [InlineData(
"""
twolen[].threelen[].`"bar"`
""",
"""

""")]
    [InlineData(
"""
foo[? @ | @
""",
"""

""")]
    public void Test_14(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "type": "object"
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo
""",
"""

""")]
    [InlineData(
"""
"foo"
""",
"""

""")]
    [InlineData(
"""
"\\"
""",
"""

""")]
    [InlineData(
"""
"\u"
""",
"""

""")]
    public void Test_15(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "type": "object"
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
*||*|*|*
""",
"""

""")]
    [InlineData(
"""
*[]||[*]
""",
"""
[]
""")]
    [InlineData(
"""
[*.*]
""",
"""
[
  null
]
""")]
    public void Test_16(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
[]
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

}