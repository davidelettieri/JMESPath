// <auto-generated /> 
#nullable enable

using JMESPath;

public class Functions
{

    [Theory]
    [InlineData(
"""
abs(foo)
""",
"""
1
""")]
    [InlineData(
"""
abs(foo)
""",
"""
1
""")]
    [InlineData(
"""
abs(str)
""",
"""

""")]
    [InlineData(
"""
abs(array[1])
""",
"""
3
""")]
    [InlineData(
"""
abs(array[1])
""",
"""
3
""")]
    [InlineData(
"""
abs(`false`)
""",
"""

""")]
    [InlineData(
"""
abs(`-24`)
""",
"""
24
""")]
    [InlineData(
"""
abs(`-24`)
""",
"""
24
""")]
    [InlineData(
"""
abs(`1`, `2`)
""",
"""

""")]
    [InlineData(
"""
abs()
""",
"""

""")]
    [InlineData(
"""
unknown_function(`1`, `2`)
""",
"""

""")]
    [InlineData(
"""
avg(numbers)
""",
"""
2.75
""")]
    [InlineData(
"""
avg(array)
""",
"""

""")]
    [InlineData(
"""
avg('abc')
""",
"""

""")]
    [InlineData(
"""
avg(foo)
""",
"""

""")]
    [InlineData(
"""
avg(@)
""",
"""

""")]
    [InlineData(
"""
avg(strings)
""",
"""

""")]
    [InlineData(
"""
avg(empty_list)
""",
"""

""")]
    [InlineData(
"""
ceil(`1.2`)
""",
"""
2
""")]
    [InlineData(
"""
ceil(decimals[0])
""",
"""
2
""")]
    [InlineData(
"""
ceil(decimals[1])
""",
"""
2
""")]
    [InlineData(
"""
ceil(decimals[2])
""",
"""
-1
""")]
    [InlineData(
"""
ceil('string')
""",
"""

""")]
    [InlineData(
"""
contains('abc', 'a')
""",
"""
true
""")]
    [InlineData(
"""
contains('abc', 'd')
""",
"""
false
""")]
    [InlineData(
"""
contains(`false`, 'd')
""",
"""

""")]
    [InlineData(
"""
contains(strings, 'a')
""",
"""
true
""")]
    [InlineData(
"""
contains(decimals, `1.2`)
""",
"""
true
""")]
    [InlineData(
"""
contains(decimals, `false`)
""",
"""
false
""")]
    [InlineData(
"""
ends_with(str, 'r')
""",
"""
true
""")]
    [InlineData(
"""
ends_with(str, 'tr')
""",
"""
true
""")]
    [InlineData(
"""
ends_with(str, 'Str')
""",
"""
true
""")]
    [InlineData(
"""
ends_with(str, 'SStr')
""",
"""
false
""")]
    [InlineData(
"""
ends_with(str, 'foo')
""",
"""
false
""")]
    [InlineData(
"""
ends_with(str, `0`)
""",
"""

""")]
    [InlineData(
"""
floor(`1.2`)
""",
"""
1
""")]
    [InlineData(
"""
floor('string')
""",
"""

""")]
    [InlineData(
"""
floor(decimals[0])
""",
"""
1
""")]
    [InlineData(
"""
floor(foo)
""",
"""
-1
""")]
    [InlineData(
"""
floor(str)
""",
"""

""")]
    [InlineData(
"""
length('abc')
""",
"""
3
""")]
    [InlineData(
"""
length('âœ“foo')
""",
"""
4
""")]
    [InlineData(
"""
length('')
""",
"""
0
""")]
    [InlineData(
"""
length(@)
""",
"""
12
""")]
    [InlineData(
"""
length(strings[0])
""",
"""
1
""")]
    [InlineData(
"""
length(str)
""",
"""
3
""")]
    [InlineData(
"""
length(array)
""",
"""
6
""")]
    [InlineData(
"""
length(objects)
""",
"""
2
""")]
    [InlineData(
"""
length(`false`)
""",
"""

""")]
    [InlineData(
"""
length(foo)
""",
"""

""")]
    [InlineData(
"""
length(strings[0])
""",
"""
1
""")]
    [InlineData(
"""
max(numbers)
""",
"""
5
""")]
    [InlineData(
"""
max(decimals)
""",
"""
1.2
""")]
    [InlineData(
"""
max(strings)
""",
"""
c
""")]
    [InlineData(
"""
max(abc)
""",
"""

""")]
    [InlineData(
"""
max(array)
""",
"""

""")]
    [InlineData(
"""
max(decimals)
""",
"""
1.2
""")]
    [InlineData(
"""
max(empty_list)
""",
"""

""")]
    [InlineData(
"""
merge(`{}`)
""",
"""
{}
""")]
    [InlineData(
"""
merge(`{}`, `{}`)
""",
"""
{}
""")]
    [InlineData(
"""
merge(`{"a": 1}`, `{"b": 2}`)
""",
"""
{
  "a": 1,
  "b": 2
}
""")]
    [InlineData(
"""
merge(`{"a": 1}`, `{"a": 2}`)
""",
"""
{
  "a": 2
}
""")]
    [InlineData(
"""
merge(`{"a": 1, "b": 2}`, `{"a": 2, "c": 3}`, `{"d": 4}`)
""",
"""
{
  "a": 2,
  "b": 2,
  "c": 3,
  "d": 4
}
""")]
    [InlineData(
"""
min(numbers)
""",
"""
-1
""")]
    [InlineData(
"""
min(decimals)
""",
"""
-1.5
""")]
    [InlineData(
"""
min(abc)
""",
"""

""")]
    [InlineData(
"""
min(array)
""",
"""

""")]
    [InlineData(
"""
min(empty_list)
""",
"""

""")]
    [InlineData(
"""
min(decimals)
""",
"""
-1.5
""")]
    [InlineData(
"""
min(strings)
""",
"""
a
""")]
    [InlineData(
"""
type('abc')
""",
"""
string
""")]
    [InlineData(
"""
type(`1.0`)
""",
"""
number
""")]
    [InlineData(
"""
type(`2`)
""",
"""
number
""")]
    [InlineData(
"""
type(`true`)
""",
"""
boolean
""")]
    [InlineData(
"""
type(`false`)
""",
"""
boolean
""")]
    [InlineData(
"""
type(`null`)
""",
"""
null
""")]
    [InlineData(
"""
type(`[0]`)
""",
"""
array
""")]
    [InlineData(
"""
type(`{"a": "b"}`)
""",
"""
object
""")]
    [InlineData(
"""
type(@)
""",
"""
object
""")]
    [InlineData(
"""
sort(keys(objects))
""",
"""
[
  "bar",
  "foo"
]
""")]
    [InlineData(
"""
keys(foo)
""",
"""

""")]
    [InlineData(
"""
keys(strings)
""",
"""

""")]
    [InlineData(
"""
keys(`false`)
""",
"""

""")]
    [InlineData(
"""
sort(values(objects))
""",
"""
[
  "bar",
  "baz"
]
""")]
    [InlineData(
"""
keys(empty_hash)
""",
"""
[]
""")]
    [InlineData(
"""
values(foo)
""",
"""

""")]
    [InlineData(
"""
join(', ', strings)
""",
"""
a, b, c
""")]
    [InlineData(
"""
join(', ', strings)
""",
"""
a, b, c
""")]
    [InlineData(
"""
join(',', `["a", "b"]`)
""",
"""
a,b
""")]
    [InlineData(
"""
join(',', `["a", 0]`)
""",
"""

""")]
    [InlineData(
"""
join(', ', str)
""",
"""

""")]
    [InlineData(
"""
join('|', strings)
""",
"""
a|b|c
""")]
    [InlineData(
"""
join(`2`, strings)
""",
"""

""")]
    [InlineData(
"""
join('|', decimals)
""",
"""

""")]
    [InlineData(
"""
join('|', decimals[].to_string(@))
""",
"""
1.01|1.2|-1.5
""")]
    [InlineData(
"""
join('|', empty_list)
""",
"""

""")]
    [InlineData(
"""
reverse(numbers)
""",
"""
[
  5,
  4,
  3,
  -1
]
""")]
    [InlineData(
"""
reverse(array)
""",
"""
[
  "100",
  "a",
  5,
  4,
  3,
  -1
]
""")]
    [InlineData(
"""
reverse(`[]`)
""",
"""
[]
""")]
    [InlineData(
"""
reverse('')
""",
"""

""")]
    [InlineData(
"""
reverse('hello world')
""",
"""
dlrow olleh
""")]
    [InlineData(
"""
starts_with(str, 'S')
""",
"""
true
""")]
    [InlineData(
"""
starts_with(str, 'St')
""",
"""
true
""")]
    [InlineData(
"""
starts_with(str, 'Str')
""",
"""
true
""")]
    [InlineData(
"""
starts_with(str, 'String')
""",
"""
false
""")]
    [InlineData(
"""
starts_with(str, `0`)
""",
"""

""")]
    [InlineData(
"""
sum(numbers)
""",
"""
11
""")]
    [InlineData(
"""
sum(decimals)
""",
"""
0.71
""")]
    [InlineData(
"""
sum(array)
""",
"""

""")]
    [InlineData(
"""
sum(array[].to_number(@))
""",
"""
111
""")]
    [InlineData(
"""
sum(`[]`)
""",
"""
0
""")]
    [InlineData(
"""
to_array('foo')
""",
"""
[
  "foo"
]
""")]
    [InlineData(
"""
to_array(`0`)
""",
"""
[
  0
]
""")]
    [InlineData(
"""
to_array(objects)
""",
"""
[
  {
    "foo": "bar",
    "bar": "baz"
  }
]
""")]
    [InlineData(
"""
to_array(`[1, 2, 3]`)
""",
"""
[
  1,
  2,
  3
]
""")]
    [InlineData(
"""
to_array(false)
""",
"""
[
  false
]
""")]
    [InlineData(
"""
to_string('foo')
""",
"""
foo
""")]
    [InlineData(
"""
to_string(`1.2`)
""",
"""
1.2
""")]
    [InlineData(
"""
to_string(`[0, 1]`)
""",
"""
[0,1]
""")]
    [InlineData(
"""
to_number('1.0')
""",
"""
1.0
""")]
    [InlineData(
"""
to_number('1e21')
""",
"""
1e21
""")]
    [InlineData(
"""
to_number('1.1')
""",
"""
1.1
""")]
    [InlineData(
"""
to_number('4')
""",
"""
4
""")]
    [InlineData(
"""
to_number('notanumber')
""",
"""

""")]
    [InlineData(
"""
to_number(`false`)
""",
"""

""")]
    [InlineData(
"""
to_number(`null`)
""",
"""

""")]
    [InlineData(
"""
to_number(`[0]`)
""",
"""

""")]
    [InlineData(
"""
to_number(`{"foo": 0}`)
""",
"""

""")]
    [InlineData(
"""
"to_string"(`1.0`)
""",
"""

""")]
    [InlineData(
"""
sort(numbers)
""",
"""
[
  -1,
  3,
  4,
  5
]
""")]
    [InlineData(
"""
sort(strings)
""",
"""
[
  "a",
  "b",
  "c"
]
""")]
    [InlineData(
"""
sort(decimals)
""",
"""
[
  -1.5,
  1.01,
  1.2
]
""")]
    [InlineData(
"""
sort(array)
""",
"""

""")]
    [InlineData(
"""
sort(abc)
""",
"""

""")]
    [InlineData(
"""
sort(empty_list)
""",
"""
[]
""")]
    [InlineData(
"""
sort(@)
""",
"""

""")]
    [InlineData(
"""
not_null(unknown_key, str)
""",
"""
Str
""")]
    [InlineData(
"""
not_null(unknown_key, foo.bar, empty_list, str)
""",
"""
[]
""")]
    [InlineData(
"""
not_null(unknown_key, null_key, empty_list, str)
""",
"""
[]
""")]
    [InlineData(
"""
not_null(all, expressions, are_null)
""",
"""

""")]
    [InlineData(
"""
not_null()
""",
"""

""")]
    [InlineData(
"""
numbers[].to_string(@)
""",
"""
[
  "-1",
  "3",
  "4",
  "5"
]
""")]
    [InlineData(
"""
array[].to_number(@)
""",
"""
[
  -1,
  3,
  4,
  5,
  100
]
""")]
    public void Test_1(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": -1,
  "zero": 0,
  "numbers": [
    -1,
    3,
    4,
    5
  ],
  "array": [
    -1,
    3,
    4,
    5,
    "a",
    "100"
  ],
  "strings": [
    "a",
    "b",
    "c"
  ],
  "decimals": [
    1.01,
    1.2,
    -1.5
  ],
  "str": "Str",
  "false": false,
  "empty_list": [],
  "empty_hash": {},
  "objects": {
    "foo": "bar",
    "bar": "baz"
  },
  "null_key": null
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo[].not_null(f, e, d, c, b, a)
""",
"""
[
  "b",
  "c",
  "d",
  "e",
  "f"
]
""")]
    public void Test_2(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": [
    {
      "b": "b",
      "a": "a"
    },
    {
      "c": "c",
      "b": "b"
    },
    {
      "d": "d",
      "c": "c"
    },
    {
      "e": "e",
      "d": "d"
    },
    {
      "f": "f",
      "e": "e"
    }
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
sort_by(people, &age)
""",
"""
[
  {
    "age": 10,
    "age_str": "10",
    "bool": true,
    "name": 3
  },
  {
    "age": 20,
    "age_str": "20",
    "bool": true,
    "name": "a",
    "extra": "foo"
  },
  {
    "age": 30,
    "age_str": "30",
    "bool": true,
    "name": "c"
  },
  {
    "age": 40,
    "age_str": "40",
    "bool": false,
    "name": "b",
    "extra": "bar"
  },
  {
    "age": 50,
    "age_str": "50",
    "bool": false,
    "name": "d"
  }
]
""")]
    [InlineData(
"""
sort_by(people, &age_str)
""",
"""
[
  {
    "age": 10,
    "age_str": "10",
    "bool": true,
    "name": 3
  },
  {
    "age": 20,
    "age_str": "20",
    "bool": true,
    "name": "a",
    "extra": "foo"
  },
  {
    "age": 30,
    "age_str": "30",
    "bool": true,
    "name": "c"
  },
  {
    "age": 40,
    "age_str": "40",
    "bool": false,
    "name": "b",
    "extra": "bar"
  },
  {
    "age": 50,
    "age_str": "50",
    "bool": false,
    "name": "d"
  }
]
""")]
    [InlineData(
"""
sort_by(people, &to_number(age_str))
""",
"""
[
  {
    "age": 10,
    "age_str": "10",
    "bool": true,
    "name": 3
  },
  {
    "age": 20,
    "age_str": "20",
    "bool": true,
    "name": "a",
    "extra": "foo"
  },
  {
    "age": 30,
    "age_str": "30",
    "bool": true,
    "name": "c"
  },
  {
    "age": 40,
    "age_str": "40",
    "bool": false,
    "name": "b",
    "extra": "bar"
  },
  {
    "age": 50,
    "age_str": "50",
    "bool": false,
    "name": "d"
  }
]
""")]
    [InlineData(
"""
sort_by(people, &age)[].name
""",
"""
[
  3,
  "a",
  "c",
  "b",
  "d"
]
""")]
    [InlineData(
"""
sort_by(people, &extra)
""",
"""

""")]
    [InlineData(
"""
sort_by(people, &bool)
""",
"""

""")]
    [InlineData(
"""
sort_by(people, &name)
""",
"""

""")]
    [InlineData(
"""
sort_by(people, name)
""",
"""

""")]
    [InlineData(
"""
sort_by(people, &age)[].extra
""",
"""
[
  "foo",
  "bar"
]
""")]
    [InlineData(
"""
sort_by(`[]`, &age)
""",
"""
[]
""")]
    [InlineData(
"""
max_by(people, &age)
""",
"""
{
  "age": 50,
  "age_str": "50",
  "bool": false,
  "name": "d"
}
""")]
    [InlineData(
"""
max_by(people, &age_str)
""",
"""
{
  "age": 50,
  "age_str": "50",
  "bool": false,
  "name": "d"
}
""")]
    [InlineData(
"""
max_by(people, &bool)
""",
"""

""")]
    [InlineData(
"""
max_by(people, &extra)
""",
"""

""")]
    [InlineData(
"""
max_by(people, &to_number(age_str))
""",
"""
{
  "age": 50,
  "age_str": "50",
  "bool": false,
  "name": "d"
}
""")]
    [InlineData(
"""
max_by(`[]`, &age)
""",
"""

""")]
    [InlineData(
"""
min_by(people, &age)
""",
"""
{
  "age": 10,
  "age_str": "10",
  "bool": true,
  "name": 3
}
""")]
    [InlineData(
"""
min_by(people, &age_str)
""",
"""
{
  "age": 10,
  "age_str": "10",
  "bool": true,
  "name": 3
}
""")]
    [InlineData(
"""
min_by(people, &bool)
""",
"""

""")]
    [InlineData(
"""
min_by(people, &extra)
""",
"""

""")]
    [InlineData(
"""
min_by(people, &to_number(age_str))
""",
"""
{
  "age": 10,
  "age_str": "10",
  "bool": true,
  "name": 3
}
""")]
    [InlineData(
"""
min_by(`[]`, &age)
""",
"""

""")]
    public void Test_3(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "people": [
    {
      "age": 20,
      "age_str": "20",
      "bool": true,
      "name": "a",
      "extra": "foo"
    },
    {
      "age": 40,
      "age_str": "40",
      "bool": false,
      "name": "b",
      "extra": "bar"
    },
    {
      "age": 30,
      "age_str": "30",
      "bool": true,
      "name": "c"
    },
    {
      "age": 50,
      "age_str": "50",
      "bool": false,
      "name": "d"
    },
    {
      "age": 10,
      "age_str": "10",
      "bool": true,
      "name": 3
    }
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
sort_by(people, &age)
""",
"""
[
  {
    "age": 10,
    "order": "1"
  },
  {
    "age": 10,
    "order": "2"
  },
  {
    "age": 10,
    "order": "3"
  },
  {
    "age": 10,
    "order": "4"
  },
  {
    "age": 10,
    "order": "5"
  },
  {
    "age": 10,
    "order": "6"
  },
  {
    "age": 10,
    "order": "7"
  },
  {
    "age": 10,
    "order": "8"
  },
  {
    "age": 10,
    "order": "9"
  },
  {
    "age": 10,
    "order": "10"
  },
  {
    "age": 10,
    "order": "11"
  }
]
""")]
    public void Test_4(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "people": [
    {
      "age": 10,
      "order": "1"
    },
    {
      "age": 10,
      "order": "2"
    },
    {
      "age": 10,
      "order": "3"
    },
    {
      "age": 10,
      "order": "4"
    },
    {
      "age": 10,
      "order": "5"
    },
    {
      "age": 10,
      "order": "6"
    },
    {
      "age": 10,
      "order": "7"
    },
    {
      "age": 10,
      "order": "8"
    },
    {
      "age": 10,
      "order": "9"
    },
    {
      "age": 10,
      "order": "10"
    },
    {
      "age": 10,
      "order": "11"
    }
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
map(&a, people)
""",
"""
[
  10,
  10,
  10,
  10,
  10,
  10,
  10,
  10,
  10
]
""")]
    [InlineData(
"""
map(&c, people)
""",
"""
[
  "z",
  null,
  null,
  "z",
  null,
  null,
  "z",
  null,
  null
]
""")]
    [InlineData(
"""
map(&a, badkey)
""",
"""

""")]
    [InlineData(
"""
map(&foo, empty)
""",
"""
[]
""")]
    public void Test_5(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "people": [
    {
      "a": 10,
      "b": 1,
      "c": "z"
    },
    {
      "a": 10,
      "b": 2,
      "c": null
    },
    {
      "a": 10,
      "b": 3
    },
    {
      "a": 10,
      "b": 4,
      "c": "z"
    },
    {
      "a": 10,
      "b": 5,
      "c": null
    },
    {
      "a": 10,
      "b": 6
    },
    {
      "a": 10,
      "b": 7,
      "c": "z"
    },
    {
      "a": 10,
      "b": 8,
      "c": null
    },
    {
      "a": 10,
      "b": 9
    }
  ],
  "empty": []
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
map(&foo.bar, array)
""",
"""
[
  "yes1",
  "yes2",
  null
]
""")]
    [InlineData(
"""
map(&foo1.bar, array)
""",
"""
[
  null,
  null,
  "no"
]
""")]
    [InlineData(
"""
map(&foo.bar.baz, array)
""",
"""
[
  null,
  null,
  null
]
""")]
    public void Test_6(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "array": [
    {
      "foo": {
        "bar": "yes1"
      }
    },
    {
      "foo": {
        "bar": "yes2"
      }
    },
    {
      "foo1": {
        "bar": "no"
      }
    }
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
map(&[], array)
""",
"""
[
  [
    1,
    2,
    3,
    4
  ],
  [
    5,
    6,
    7,
    8,
    9
  ]
]
""")]
    public void Test_7(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "array": [
    [
      1,
      2,
      3,
      [
        4
      ]
    ],
    [
      5,
      6,
      7,
      [
        8,
        9
      ]
    ]
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

}