// <auto-generated /> 
#nullable enable

using JMESPath;

public class Wildcard
{

    [Theory]
    [InlineData(
"""
foo.*.baz
""",
"""
[
  "val",
  "val",
  "val"
]
""")]
    [InlineData(
"""
foo.bar.*
""",
"""
[
  "val"
]
""")]
    [InlineData(
"""
foo.*.notbaz
""",
"""
[
  [
    "a",
    "b",
    "c"
  ],
  [
    "a",
    "b",
    "c"
  ]
]
""")]
    [InlineData(
"""
foo.*.notbaz[0]
""",
"""
[
  "a",
  "a"
]
""")]
    [InlineData(
"""
foo.*.notbaz[-1]
""",
"""
[
  "c",
  "c"
]
""")]
    public void Test_1(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": {
    "bar": {
      "baz": "val"
    },
    "other": {
      "baz": "val"
    },
    "other2": {
      "baz": "val"
    },
    "other3": {
      "notbaz": [
        "a",
        "b",
        "c"
      ]
    },
    "other4": {
      "notbaz": [
        "a",
        "b",
        "c"
      ]
    },
    "other5": {
      "other": {
        "a": 1,
        "b": 1,
        "c": 1
      }
    }
  }
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo.*
""",
"""
[
  {
    "second-1": "val"
  },
  {
    "second-1": "val"
  },
  {
    "second-1": "val"
  }
]
""")]
    [InlineData(
"""
foo.*.*
""",
"""
[
  [
    "val"
  ],
  [
    "val"
  ],
  [
    "val"
  ]
]
""")]
    [InlineData(
"""
foo.*.*.*
""",
"""
[
  [],
  [],
  []
]
""")]
    [InlineData(
"""
foo.*.*.*.*
""",
"""
[
  [],
  [],
  []
]
""")]
    public void Test_2(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": {
    "first-1": {
      "second-1": "val"
    },
    "first-2": {
      "second-1": "val"
    },
    "first-3": {
      "second-1": "val"
    }
  }
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
*.bar
""",
"""
[
  "one",
  "one"
]
""")]
    public void Test_3(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": {
    "bar": "one"
  },
  "other": {
    "bar": "one"
  },
  "nomatch": {
    "notbar": "three"
  }
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
*
""",
"""
[
  {
    "sub1": {
      "foo": "one"
    }
  },
  {
    "sub1": {
      "foo": "one"
    }
  }
]
""")]
    [InlineData(
"""
*.sub1
""",
"""
[
  {
    "foo": "one"
  },
  {
    "foo": "one"
  }
]
""")]
    [InlineData(
"""
*.*
""",
"""
[
  [
    {
      "foo": "one"
    }
  ],
  [
    {
      "foo": "one"
    }
  ]
]
""")]
    [InlineData(
"""
*.*.foo[]
""",
"""
[
  "one",
  "one"
]
""")]
    [InlineData(
"""
*.sub1.foo
""",
"""
[
  "one",
  "one"
]
""")]
    public void Test_4(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "top1": {
    "sub1": {
      "foo": "one"
    }
  },
  "top2": {
    "sub1": {
      "foo": "one"
    }
  }
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo[*].bar
""",
"""
[
  "one",
  "two",
  "three"
]
""")]
    [InlineData(
"""
foo[*].notbar
""",
"""
[
  "four"
]
""")]
    public void Test_5(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": [
    {
      "bar": "one"
    },
    {
      "bar": "two"
    },
    {
      "bar": "three"
    },
    {
      "notbar": "four"
    }
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
[*]
""",
"""
[
  {
    "bar": "one"
  },
  {
    "bar": "two"
  },
  {
    "bar": "three"
  },
  {
    "notbar": "four"
  }
]
""")]
    [InlineData(
"""
[*].bar
""",
"""
[
  "one",
  "two",
  "three"
]
""")]
    [InlineData(
"""
[*].notbar
""",
"""
[
  "four"
]
""")]
    public void Test_6(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
[
  {
    "bar": "one"
  },
  {
    "bar": "two"
  },
  {
    "bar": "three"
  },
  {
    "notbar": "four"
  }
]
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo.bar[*].baz
""",
"""
[
  [
    "one",
    "two",
    "three"
  ],
  [
    "four",
    "five",
    "six"
  ],
  [
    "seven",
    "eight",
    "nine"
  ]
]
""")]
    [InlineData(
"""
foo.bar[*].baz[0]
""",
"""
[
  "one",
  "four",
  "seven"
]
""")]
    [InlineData(
"""
foo.bar[*].baz[1]
""",
"""
[
  "two",
  "five",
  "eight"
]
""")]
    [InlineData(
"""
foo.bar[*].baz[2]
""",
"""
[
  "three",
  "six",
  "nine"
]
""")]
    [InlineData(
"""
foo.bar[*].baz[3]
""",
"""
[]
""")]
    public void Test_7(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": {
    "bar": [
      {
        "baz": [
          "one",
          "two",
          "three"
        ]
      },
      {
        "baz": [
          "four",
          "five",
          "six"
        ]
      },
      {
        "baz": [
          "seven",
          "eight",
          "nine"
        ]
      }
    ]
  }
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo.bar[*]
""",
"""
[
  [
    "one",
    "two"
  ],
  [
    "three",
    "four"
  ]
]
""")]
    [InlineData(
"""
foo.bar[0]
""",
"""
[
  "one",
  "two"
]
""")]
    [InlineData(
"""
foo.bar[0][0]
""",
"""
one
""")]
    [InlineData(
"""
foo.bar[0][0][0]
""",
"""

""")]
    [InlineData(
"""
foo.bar[0][0][0][0]
""",
"""

""")]
    [InlineData(
"""
foo[0][0]
""",
"""

""")]
    public void Test_8(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": {
    "bar": [
      [
        "one",
        "two"
      ],
      [
        "three",
        "four"
      ]
    ]
  }
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo[*].bar[*].kind
""",
"""
[
  [
    "basic",
    "intermediate"
  ],
  [
    "advanced",
    "expert"
  ]
]
""")]
    [InlineData(
"""
foo[*].bar[0].kind
""",
"""
[
  "basic",
  "advanced"
]
""")]
    public void Test_9(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": [
    {
      "bar": [
        {
          "kind": "basic"
        },
        {
          "kind": "intermediate"
        }
      ]
    },
    {
      "bar": [
        {
          "kind": "advanced"
        },
        {
          "kind": "expert"
        }
      ]
    },
    {
      "bar": "string"
    }
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo[*].bar.kind
""",
"""
[
  "basic",
  "intermediate",
  "advanced",
  "expert"
]
""")]
    public void Test_10(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": [
    {
      "bar": {
        "kind": "basic"
      }
    },
    {
      "bar": {
        "kind": "intermediate"
      }
    },
    {
      "bar": {
        "kind": "advanced"
      }
    },
    {
      "bar": {
        "kind": "expert"
      }
    },
    {
      "bar": "string"
    }
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo[*].bar[0]
""",
"""
[
  "one",
  "three",
  "five"
]
""")]
    [InlineData(
"""
foo[*].bar[1]
""",
"""
[
  "two",
  "four"
]
""")]
    [InlineData(
"""
foo[*].bar[2]
""",
"""
[]
""")]
    public void Test_11(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": [
    {
      "bar": [
        "one",
        "two"
      ]
    },
    {
      "bar": [
        "three",
        "four"
      ]
    },
    {
      "bar": [
        "five"
      ]
    }
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo[*].bar[0]
""",
"""
[]
""")]
    public void Test_12(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": [
    {
      "bar": []
    },
    {
      "bar": []
    },
    {
      "bar": []
    }
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo[*][0]
""",
"""
[
  "one",
  "three",
  "five"
]
""")]
    [InlineData(
"""
foo[*][1]
""",
"""
[
  "two",
  "four"
]
""")]
    public void Test_13(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": [
    [
      "one",
      "two"
    ],
    [
      "three",
      "four"
    ],
    [
      "five"
    ]
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo[*][0]
""",
"""
[
  [
    "one",
    "two"
  ],
  [
    "five",
    "six"
  ],
  [
    "nine"
  ]
]
""")]
    [InlineData(
"""
foo[*][1]
""",
"""
[
  [
    "three",
    "four"
  ],
  [
    "seven",
    "eight"
  ],
  [
    "ten"
  ]
]
""")]
    [InlineData(
"""
foo[*][0][0]
""",
"""
[
  "one",
  "five",
  "nine"
]
""")]
    [InlineData(
"""
foo[*][1][0]
""",
"""
[
  "three",
  "seven",
  "ten"
]
""")]
    [InlineData(
"""
foo[*][0][1]
""",
"""
[
  "two",
  "six"
]
""")]
    [InlineData(
"""
foo[*][1][1]
""",
"""
[
  "four",
  "eight"
]
""")]
    [InlineData(
"""
foo[*][2]
""",
"""
[]
""")]
    [InlineData(
"""
foo[*][2][2]
""",
"""
[]
""")]
    [InlineData(
"""
bar[*]
""",
"""

""")]
    [InlineData(
"""
bar[*].baz[*]
""",
"""

""")]
    public void Test_14(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": [
    [
      [
        "one",
        "two"
      ],
      [
        "three",
        "four"
      ]
    ],
    [
      [
        "five",
        "six"
      ],
      [
        "seven",
        "eight"
      ]
    ],
    [
      [
        "nine"
      ],
      [
        "ten"
      ]
    ]
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
string[*]
""",
"""

""")]
    [InlineData(
"""
hash[*]
""",
"""

""")]
    [InlineData(
"""
number[*]
""",
"""

""")]
    [InlineData(
"""
nullvalue[*]
""",
"""

""")]
    [InlineData(
"""
string[*].foo
""",
"""

""")]
    [InlineData(
"""
hash[*].foo
""",
"""

""")]
    [InlineData(
"""
number[*].foo
""",
"""

""")]
    [InlineData(
"""
nullvalue[*].foo
""",
"""

""")]
    [InlineData(
"""
nullvalue[*].foo[*].bar
""",
"""

""")]
    public void Test_15(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "string": "string",
  "hash": {
    "foo": "bar",
    "bar": "baz"
  },
  "number": 23,
  "nullvalue": null
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
string.*
""",
"""

""")]
    [InlineData(
"""
hash.*
""",
"""
[
  "val",
  "val"
]
""")]
    [InlineData(
"""
number.*
""",
"""

""")]
    [InlineData(
"""
array.*
""",
"""

""")]
    [InlineData(
"""
nullvalue.*
""",
"""

""")]
    public void Test_16(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "string": "string",
  "hash": {
    "foo": "val",
    "bar": "val"
  },
  "number": 23,
  "array": [
    1,
    2,
    3
  ],
  "nullvalue": null
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
*[0]
""",
"""
[
  0,
  0
]
""")]
    public void Test_17(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "a": [
    0,
    1,
    2
  ],
  "b": [
    0,
    1,
    2
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

}