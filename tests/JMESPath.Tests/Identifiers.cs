// <auto-generated /> 
#nullable enable

using JMESPath;

public class Identifiers
{

    [Theory]
    [InlineData(
"""
__L
""",
"""
true
""")]
    public void Test_1(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "__L": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"!\r"
""",
"""
true
""")]
    public void Test_2(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "!\r": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
Y_1623
""",
"""
true
""")]
    public void Test_3(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "Y_1623": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
x
""",
"""
true
""")]
    public void Test_4(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "x": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\tF\uCebb"
""",
"""
true
""")]
    public void Test_5(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\tF\uCEBB": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
" \t"
""",
"""
true
""")]
    public void Test_6(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  " \t": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
" "
""",
"""
true
""")]
    public void Test_7(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  " ": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
v2
""",
"""
true
""")]
    public void Test_8(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "v2": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\t"
""",
"""
true
""")]
    public void Test_9(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\t": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
_X
""",
"""
true
""")]
    public void Test_10(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "_X": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\t4\ud9da\udd15"
""",
"""
true
""")]
    public void Test_11(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\t4\uD9DA\uDD15": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
v24_W
""",
"""
true
""")]
    public void Test_12(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "v24_W": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"H"
""",
"""
true
""")]
    public void Test_13(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "H": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\f"
""",
"""
true
""")]
    public void Test_14(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\f": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"E4"
""",
"""
true
""")]
    public void Test_15(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "E4": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"!"
""",
"""
true
""")]
    public void Test_16(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "!": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
tM
""",
"""
true
""")]
    public void Test_17(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "tM": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
" ["
""",
"""
true
""")]
    public void Test_18(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  " [": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"R!"
""",
"""
true
""")]
    public void Test_19(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "R!": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
_6W
""",
"""
true
""")]
    public void Test_20(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "_6W": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\uaBA1\r"
""",
"""
true
""")]
    public void Test_21(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\uABA1\r": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
tL7
""",
"""
true
""")]
    public void Test_22(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "tL7": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"<<U\t"
""",
"""
true
""")]
    public void Test_23(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\u003C\u003CU\t": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\ubBcE\ufAfB"
""",
"""
true
""")]
    public void Test_24(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\uBBCE\uFAFB": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
sNA_
""",
"""
true
""")]
    public void Test_25(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "sNA_": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"9"
""",
"""
true
""")]
    public void Test_26(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "9": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\\\b\ud8cb\udc83"
""",
"""
true
""")]
    public void Test_27(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\\\b\uD8CB\uDC83": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"r"
""",
"""
true
""")]
    public void Test_28(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "r": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
Q
""",
"""
true
""")]
    public void Test_29(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "Q": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
_Q__7GL8
""",
"""
true
""")]
    public void Test_30(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "_Q__7GL8": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\\"
""",
"""
true
""")]
    public void Test_31(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\\": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
RR9_
""",
"""
true
""")]
    public void Test_32(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "RR9_": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\r\f:"
""",
"""
true
""")]
    public void Test_33(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\r\f:": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
r7
""",
"""
true
""")]
    public void Test_34(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "r7": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"-"
""",
"""
true
""")]
    public void Test_35(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "-": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
p9
""",
"""
true
""")]
    public void Test_36(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "p9": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
__
""",
"""
true
""")]
    public void Test_37(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "__": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\b\t"
""",
"""
true
""")]
    public void Test_38(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\b\t": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
O_
""",
"""
true
""")]
    public void Test_39(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "O_": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
_r_8
""",
"""
true
""")]
    public void Test_40(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "_r_8": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
_j
""",
"""
true
""")]
    public void Test_41(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "_j": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
":"
""",
"""
true
""")]
    public void Test_42(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  ":": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\rB"
""",
"""
true
""")]
    public void Test_43(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\rB": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
Obf
""",
"""
true
""")]
    public void Test_44(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "Obf": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\n"
""",
"""
true
""")]
    public void Test_45(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\n": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\f󥌳"
""",
"""
true
""")]
    public void Test_46(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\f\uDB54\uDF33": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\\\u4FDc"
""",
"""
true
""")]
    public void Test_47(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\\\u4FDC": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\r"
""",
"""
true
""")]
    public void Test_48(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\r": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
m_
""",
"""
true
""")]
    public void Test_49(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "m_": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\r\fB "
""",
"""
true
""")]
    public void Test_50(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\r\fB ": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"+\"\""
""",
"""
true
""")]
    public void Test_51(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\u002B\u0022\u0022": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
Mg
""",
"""
true
""")]
    public void Test_52(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "Mg": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\"!\/"
""",
"""
true
""")]
    public void Test_53(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\u0022!/": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"7\""
""",
"""
true
""")]
    public void Test_54(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "7\u0022": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\\󞢤S"
""",
"""
true
""")]
    public void Test_55(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\\\uDB3A\uDCA4S": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\""
""",
"""
true
""")]
    public void Test_56(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\u0022": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
Kl
""",
"""
true
""")]
    public void Test_57(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "Kl": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\b\b"
""",
"""
true
""")]
    public void Test_58(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\b\b": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
">"
""",
"""
true
""")]
    public void Test_59(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\u003E": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
hvu
""",
"""
true
""")]
    public void Test_60(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "hvu": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"; !"
""",
"""
true
""")]
    public void Test_61(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "; !": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
hU
""",
"""
true
""")]
    public void Test_62(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "hU": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"!I\n\/"
""",
"""
true
""")]
    public void Test_63(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "!I\n/": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\uEEbF"
""",
"""
true
""")]
    public void Test_64(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\uEEBF": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"U)\t"
""",
"""
true
""")]
    public void Test_65(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "U)\t": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
fa0_9
""",
"""
true
""")]
    public void Test_66(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "fa0_9": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"/"
""",
"""
true
""")]
    public void Test_67(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "/": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
Gy
""",
"""
true
""")]
    public void Test_68(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "Gy": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\b"
""",
"""
true
""")]
    public void Test_69(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\b": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"<"
""",
"""
true
""")]
    public void Test_70(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\u003C": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\t"
""",
"""
true
""")]
    public void Test_71(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\t": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\t&\\\r"
""",
"""
true
""")]
    public void Test_72(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\t\u0026\\\r": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"#"
""",
"""
true
""")]
    public void Test_73(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "#": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
B__
""",
"""
true
""")]
    public void Test_74(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "B__": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\nS \n"
""",
"""
true
""")]
    public void Test_75(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\nS \n": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
Bp
""",
"""
true
""")]
    public void Test_76(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "Bp": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
",\t;"
""",
"""
true
""")]
    public void Test_77(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  ",\t;": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
B_q
""",
"""
true
""")]
    public void Test_78(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "B_q": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\/+\t\n\b!Z"
""",
"""
true
""")]
    public void Test_79(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "/\u002B\t\n\b!Z": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"󇟇\\ueFAc"
""",
"""
true
""")]
    public void Test_80(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\uDADD\uDFC7\\ueFAc": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
":\f"
""",
"""
true
""")]
    public void Test_81(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  ":\f": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\/"
""",
"""
true
""")]
    public void Test_82(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "/": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
_BW_6Hg_Gl
""",
"""
true
""")]
    public void Test_83(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "_BW_6Hg_Gl": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"􃰂"
""",
"""
true
""")]
    public void Test_84(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\uDBCF\uDC02": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
zs1DC
""",
"""
true
""")]
    public void Test_85(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "zs1DC": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
__434
""",
"""
true
""")]
    public void Test_86(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "__434": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"󵅁"
""",
"""
true
""")]
    public void Test_87(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\uDB94\uDD41": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
Z_5
""",
"""
true
""")]
    public void Test_88(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "Z_5": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
z_M_
""",
"""
true
""")]
    public void Test_89(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "z_M_": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
YU_2
""",
"""
true
""")]
    public void Test_90(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "YU_2": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
_0
""",
"""
true
""")]
    public void Test_91(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "_0": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\b+"
""",
"""
true
""")]
    public void Test_92(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\b\u002B": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\""
""",
"""
true
""")]
    public void Test_93(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\u0022": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
D7
""",
"""
true
""")]
    public void Test_94(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "D7": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
_62L
""",
"""
true
""")]
    public void Test_95(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "_62L": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\tK\t"
""",
"""
true
""")]
    public void Test_96(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\tK\t": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\n\\\f"
""",
"""
true
""")]
    public void Test_97(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\n\\\f": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
I_
""",
"""
true
""")]
    public void Test_98(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "I_": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
W_a0_
""",
"""
true
""")]
    public void Test_99(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "W_a0_": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
BQ
""",
"""
true
""")]
    public void Test_100(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "BQ": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\tX$\uABBb"
""",
"""
true
""")]
    public void Test_101(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\tX$\uABBB": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
Z9
""",
"""
true
""")]
    public void Test_102(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "Z9": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\b%\"򞄏"
""",
"""
true
""")]
    public void Test_103(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\b%\u0022\uDA38\uDD0F": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
_F
""",
"""
true
""")]
    public void Test_104(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "_F": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"!,"
""",
"""
true
""")]
    public void Test_105(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "!,": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\"!"
""",
"""
true
""")]
    public void Test_106(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\u0022!": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
Hh
""",
"""
true
""")]
    public void Test_107(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "Hh": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"&"
""",
"""
true
""")]
    public void Test_108(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\u0026": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"9\r\\R"
""",
"""
true
""")]
    public void Test_109(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "9\r\\R": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
M_k
""",
"""
true
""")]
    public void Test_110(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "M_k": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"!\b\n󑩒\"\""
""",
"""
true
""")]
    public void Test_111(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "!\b\n\uDB06\uDE52\u0022\u0022": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"6"
""",
"""
true
""")]
    public void Test_112(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "6": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
_7
""",
"""
true
""")]
    public void Test_113(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "_7": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"0"
""",
"""
true
""")]
    public void Test_114(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "0": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\\8\\"
""",
"""
true
""")]
    public void Test_115(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\\8\\": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
b7eo
""",
"""
true
""")]
    public void Test_116(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "b7eo": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
xIUo9
""",
"""
true
""")]
    public void Test_117(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "xIUo9": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"5"
""",
"""
true
""")]
    public void Test_118(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "5": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"?"
""",
"""
true
""")]
    public void Test_119(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "?": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
sU
""",
"""
true
""")]
    public void Test_120(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "sU": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"VH2&H\\\/"
""",
"""
true
""")]
    public void Test_121(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "VH2\u0026H\\/": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
_C
""",
"""
true
""")]
    public void Test_122(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "_C": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
_
""",
"""
true
""")]
    public void Test_123(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "_": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"<\t"
""",
"""
true
""")]
    public void Test_124(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\u003C\t": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
"\uD834\uDD1E"
""",
"""
true
""")]
    public void Test_125(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "\uD834\uDD1E": true
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

}