// <auto-generated /> 
#nullable enable

using JMESPath;

public class Filters
{

    [Theory]
    [InlineData(
"""
foo[?name == 'a']
""",
"""
[
  {
    "name": "a"
  }
]
""")]
    public void Test_1(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": [
    {
      "name": "a"
    },
    {
      "name": "b"
    }
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
*[?[0] == `0`]
""",
"""
[
  [],
  []
]
""")]
    public void Test_2(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": [
    0,
    1
  ],
  "bar": [
    2,
    3
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo[?first == last]
""",
"""
[
  {
    "first": "foo",
    "last": "foo"
  }
]
""")]
    [InlineData(
"""
foo[?first == last].first
""",
"""
[
  "foo"
]
""")]
    public void Test_3(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": [
    {
      "first": "foo",
      "last": "bar"
    },
    {
      "first": "foo",
      "last": "foo"
    },
    {
      "first": "foo",
      "last": "baz"
    }
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo[?age > `25`]
""",
"""
[
  {
    "age": 30
  }
]
""")]
    [InlineData(
"""
foo[?age >= `25`]
""",
"""
[
  {
    "age": 25
  },
  {
    "age": 30
  }
]
""")]
    [InlineData(
"""
foo[?age > `30`]
""",
"""
[]
""")]
    [InlineData(
"""
foo[?age < `25`]
""",
"""
[
  {
    "age": 20
  }
]
""")]
    [InlineData(
"""
foo[?age <= `25`]
""",
"""
[
  {
    "age": 20
  },
  {
    "age": 25
  }
]
""")]
    [InlineData(
"""
foo[?age < `20`]
""",
"""
[]
""")]
    [InlineData(
"""
foo[?age == `20`]
""",
"""
[
  {
    "age": 20
  }
]
""")]
    [InlineData(
"""
foo[?age != `20`]
""",
"""
[
  {
    "age": 25
  },
  {
    "age": 30
  }
]
""")]
    public void Test_4(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": [
    {
      "age": 20
    },
    {
      "age": 25
    },
    {
      "age": 30
    }
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo[?weight > `44.4`]
""",
"""
[
  {
    "weight": 55.5
  }
]
""")]
    [InlineData(
"""
foo[?weight >= `44.4`]
""",
"""
[
  {
    "weight": 44.4
  },
  {
    "weight": 55.5
  }
]
""")]
    [InlineData(
"""
foo[?weight > `55.5`]
""",
"""
[]
""")]
    [InlineData(
"""
foo[?weight < `44.4`]
""",
"""
[
  {
    "weight": 33.3
  }
]
""")]
    [InlineData(
"""
foo[?weight <= `44.4`]
""",
"""
[
  {
    "weight": 33.3
  },
  {
    "weight": 44.4
  }
]
""")]
    [InlineData(
"""
foo[?weight < `33.3`]
""",
"""
[]
""")]
    [InlineData(
"""
foo[?weight == `33.3`]
""",
"""
[
  {
    "weight": 33.3
  }
]
""")]
    [InlineData(
"""
foo[?weight != `33.3`]
""",
"""
[
  {
    "weight": 44.4
  },
  {
    "weight": 55.5
  }
]
""")]
    public void Test_5(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": [
    {
      "weight": 33.3
    },
    {
      "weight": 44.4
    },
    {
      "weight": 55.5
    }
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo[?top.name == 'a']
""",
"""
[
  {
    "top": {
      "name": "a"
    }
  }
]
""")]
    public void Test_6(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": [
    {
      "top": {
        "name": "a"
      }
    },
    {
      "top": {
        "name": "b"
      }
    }
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo[?top.first == top.last]
""",
"""
[
  {
    "top": {
      "first": "foo",
      "last": "foo"
    }
  }
]
""")]
    [InlineData(
"""
foo[?top == `{"first": "foo", "last": "bar"}`]
""",
"""
[
  {
    "top": {
      "first": "foo",
      "last": "bar"
    }
  }
]
""")]
    public void Test_7(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": [
    {
      "top": {
        "first": "foo",
        "last": "bar"
      }
    },
    {
      "top": {
        "first": "foo",
        "last": "foo"
      }
    },
    {
      "top": {
        "first": "foo",
        "last": "baz"
      }
    }
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo[?key == `true`]
""",
"""
[
  {
    "key": true
  }
]
""")]
    [InlineData(
"""
foo[?key == `false`]
""",
"""
[
  {
    "key": false
  }
]
""")]
    [InlineData(
"""
foo[?key == `0`]
""",
"""
[
  {
    "key": 0
  }
]
""")]
    [InlineData(
"""
foo[?key == `1`]
""",
"""
[
  {
    "key": 1
  }
]
""")]
    [InlineData(
"""
foo[?key == `[0]`]
""",
"""
[
  {
    "key": [
      0
    ]
  }
]
""")]
    [InlineData(
"""
foo[?key == `{"bar": [0]}`]
""",
"""
[
  {
    "key": {
      "bar": [
        0
      ]
    }
  }
]
""")]
    [InlineData(
"""
foo[?key == `null`]
""",
"""
[
  {
    "key": null
  }
]
""")]
    [InlineData(
"""
foo[?key == `[1]`]
""",
"""
[
  {
    "key": [
      1
    ]
  }
]
""")]
    [InlineData(
"""
foo[?key == `{"a":2}`]
""",
"""
[
  {
    "key": {
      "a": 2
    }
  }
]
""")]
    [InlineData(
"""
foo[?`true` == key]
""",
"""
[
  {
    "key": true
  }
]
""")]
    [InlineData(
"""
foo[?`false` == key]
""",
"""
[
  {
    "key": false
  }
]
""")]
    [InlineData(
"""
foo[?`0` == key]
""",
"""
[
  {
    "key": 0
  }
]
""")]
    [InlineData(
"""
foo[?`1` == key]
""",
"""
[
  {
    "key": 1
  }
]
""")]
    [InlineData(
"""
foo[?`[0]` == key]
""",
"""
[
  {
    "key": [
      0
    ]
  }
]
""")]
    [InlineData(
"""
foo[?`{"bar": [0]}` == key]
""",
"""
[
  {
    "key": {
      "bar": [
        0
      ]
    }
  }
]
""")]
    [InlineData(
"""
foo[?`null` == key]
""",
"""
[
  {
    "key": null
  }
]
""")]
    [InlineData(
"""
foo[?`[1]` == key]
""",
"""
[
  {
    "key": [
      1
    ]
  }
]
""")]
    [InlineData(
"""
foo[?`{"a":2}` == key]
""",
"""
[
  {
    "key": {
      "a": 2
    }
  }
]
""")]
    [InlineData(
"""
foo[?key != `true`]
""",
"""
[
  {
    "key": false
  },
  {
    "key": 0
  },
  {
    "key": 1
  },
  {
    "key": [
      0
    ]
  },
  {
    "key": {
      "bar": [
        0
      ]
    }
  },
  {
    "key": null
  },
  {
    "key": [
      1
    ]
  },
  {
    "key": {
      "a": 2
    }
  }
]
""")]
    [InlineData(
"""
foo[?key != `false`]
""",
"""
[
  {
    "key": true
  },
  {
    "key": 0
  },
  {
    "key": 1
  },
  {
    "key": [
      0
    ]
  },
  {
    "key": {
      "bar": [
        0
      ]
    }
  },
  {
    "key": null
  },
  {
    "key": [
      1
    ]
  },
  {
    "key": {
      "a": 2
    }
  }
]
""")]
    [InlineData(
"""
foo[?key != `0`]
""",
"""
[
  {
    "key": true
  },
  {
    "key": false
  },
  {
    "key": 1
  },
  {
    "key": [
      0
    ]
  },
  {
    "key": {
      "bar": [
        0
      ]
    }
  },
  {
    "key": null
  },
  {
    "key": [
      1
    ]
  },
  {
    "key": {
      "a": 2
    }
  }
]
""")]
    [InlineData(
"""
foo[?key != `1`]
""",
"""
[
  {
    "key": true
  },
  {
    "key": false
  },
  {
    "key": 0
  },
  {
    "key": [
      0
    ]
  },
  {
    "key": {
      "bar": [
        0
      ]
    }
  },
  {
    "key": null
  },
  {
    "key": [
      1
    ]
  },
  {
    "key": {
      "a": 2
    }
  }
]
""")]
    [InlineData(
"""
foo[?key != `null`]
""",
"""
[
  {
    "key": true
  },
  {
    "key": false
  },
  {
    "key": 0
  },
  {
    "key": 1
  },
  {
    "key": [
      0
    ]
  },
  {
    "key": {
      "bar": [
        0
      ]
    }
  },
  {
    "key": [
      1
    ]
  },
  {
    "key": {
      "a": 2
    }
  }
]
""")]
    [InlineData(
"""
foo[?key != `[1]`]
""",
"""
[
  {
    "key": true
  },
  {
    "key": false
  },
  {
    "key": 0
  },
  {
    "key": 1
  },
  {
    "key": [
      0
    ]
  },
  {
    "key": {
      "bar": [
        0
      ]
    }
  },
  {
    "key": null
  },
  {
    "key": {
      "a": 2
    }
  }
]
""")]
    [InlineData(
"""
foo[?key != `{"a":2}`]
""",
"""
[
  {
    "key": true
  },
  {
    "key": false
  },
  {
    "key": 0
  },
  {
    "key": 1
  },
  {
    "key": [
      0
    ]
  },
  {
    "key": {
      "bar": [
        0
      ]
    }
  },
  {
    "key": null
  },
  {
    "key": [
      1
    ]
  }
]
""")]
    [InlineData(
"""
foo[?`true` != key]
""",
"""
[
  {
    "key": false
  },
  {
    "key": 0
  },
  {
    "key": 1
  },
  {
    "key": [
      0
    ]
  },
  {
    "key": {
      "bar": [
        0
      ]
    }
  },
  {
    "key": null
  },
  {
    "key": [
      1
    ]
  },
  {
    "key": {
      "a": 2
    }
  }
]
""")]
    [InlineData(
"""
foo[?`false` != key]
""",
"""
[
  {
    "key": true
  },
  {
    "key": 0
  },
  {
    "key": 1
  },
  {
    "key": [
      0
    ]
  },
  {
    "key": {
      "bar": [
        0
      ]
    }
  },
  {
    "key": null
  },
  {
    "key": [
      1
    ]
  },
  {
    "key": {
      "a": 2
    }
  }
]
""")]
    [InlineData(
"""
foo[?`0` != key]
""",
"""
[
  {
    "key": true
  },
  {
    "key": false
  },
  {
    "key": 1
  },
  {
    "key": [
      0
    ]
  },
  {
    "key": {
      "bar": [
        0
      ]
    }
  },
  {
    "key": null
  },
  {
    "key": [
      1
    ]
  },
  {
    "key": {
      "a": 2
    }
  }
]
""")]
    [InlineData(
"""
foo[?`1` != key]
""",
"""
[
  {
    "key": true
  },
  {
    "key": false
  },
  {
    "key": 0
  },
  {
    "key": [
      0
    ]
  },
  {
    "key": {
      "bar": [
        0
      ]
    }
  },
  {
    "key": null
  },
  {
    "key": [
      1
    ]
  },
  {
    "key": {
      "a": 2
    }
  }
]
""")]
    [InlineData(
"""
foo[?`null` != key]
""",
"""
[
  {
    "key": true
  },
  {
    "key": false
  },
  {
    "key": 0
  },
  {
    "key": 1
  },
  {
    "key": [
      0
    ]
  },
  {
    "key": {
      "bar": [
        0
      ]
    }
  },
  {
    "key": [
      1
    ]
  },
  {
    "key": {
      "a": 2
    }
  }
]
""")]
    [InlineData(
"""
foo[?`[1]` != key]
""",
"""
[
  {
    "key": true
  },
  {
    "key": false
  },
  {
    "key": 0
  },
  {
    "key": 1
  },
  {
    "key": [
      0
    ]
  },
  {
    "key": {
      "bar": [
        0
      ]
    }
  },
  {
    "key": null
  },
  {
    "key": {
      "a": 2
    }
  }
]
""")]
    [InlineData(
"""
foo[?`{"a":2}` != key]
""",
"""
[
  {
    "key": true
  },
  {
    "key": false
  },
  {
    "key": 0
  },
  {
    "key": 1
  },
  {
    "key": [
      0
    ]
  },
  {
    "key": {
      "bar": [
        0
      ]
    }
  },
  {
    "key": null
  },
  {
    "key": [
      1
    ]
  }
]
""")]
    public void Test_8(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": [
    {
      "key": true
    },
    {
      "key": false
    },
    {
      "key": 0
    },
    {
      "key": 1
    },
    {
      "key": [
        0
      ]
    },
    {
      "key": {
        "bar": [
          0
        ]
      }
    },
    {
      "key": null
    },
    {
      "key": [
        1
      ]
    },
    {
      "key": {
        "a": 2
      }
    }
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo[?key == `true`]
""",
"""
[
  {
    "key": true
  }
]
""")]
    [InlineData(
"""
foo[?key == `false`]
""",
"""
[
  {
    "key": false
  }
]
""")]
    [InlineData(
"""
foo[?key]
""",
"""
[
  {
    "key": true
  },
  {
    "key": 0
  },
  {
    "key": 0.0
  },
  {
    "key": 1
  },
  {
    "key": 1.0
  },
  {
    "key": [
      0
    ]
  },
  {
    "key": [
      1
    ]
  },
  {
    "key": {
      "a": 2
    }
  }
]
""")]
    [InlineData(
"""
foo[? !key]
""",
"""
[
  {
    "key": false
  },
  {
    "key": null
  },
  {
    "key": []
  },
  {
    "key": {}
  }
]
""")]
    [InlineData(
"""
foo[? !!key]
""",
"""
[
  {
    "key": true
  },
  {
    "key": 0
  },
  {
    "key": 0.0
  },
  {
    "key": 1
  },
  {
    "key": 1.0
  },
  {
    "key": [
      0
    ]
  },
  {
    "key": [
      1
    ]
  },
  {
    "key": {
      "a": 2
    }
  }
]
""")]
    [InlineData(
"""
foo[? `true`]
""",
"""
[
  {
    "key": true
  },
  {
    "key": false
  },
  {
    "key": 0
  },
  {
    "key": 0.0
  },
  {
    "key": 1
  },
  {
    "key": 1.0
  },
  {
    "key": [
      0
    ]
  },
  {
    "key": null
  },
  {
    "key": [
      1
    ]
  },
  {
    "key": []
  },
  {
    "key": {}
  },
  {
    "key": {
      "a": 2
    }
  }
]
""")]
    [InlineData(
"""
foo[? `false`]
""",
"""
[]
""")]
    public void Test_9(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": [
    {
      "key": true
    },
    {
      "key": false
    },
    {
      "key": 0
    },
    {
      "key": 0.0
    },
    {
      "key": 1
    },
    {
      "key": 1.0
    },
    {
      "key": [
        0
      ]
    },
    {
      "key": null
    },
    {
      "key": [
        1
      ]
    },
    {
      "key": []
    },
    {
      "key": {}
    },
    {
      "key": {
        "a": 2
      }
    }
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
reservations[].instances[?bar==`1`]
""",
"""
[
  [
    {
      "foo": 2,
      "bar": 1
    }
  ]
]
""")]
    [InlineData(
"""
reservations[*].instances[?bar==`1`]
""",
"""
[
  [
    {
      "foo": 2,
      "bar": 1
    }
  ]
]
""")]
    [InlineData(
"""
reservations[].instances[?bar==`1`][]
""",
"""
[
  {
    "foo": 2,
    "bar": 1
  }
]
""")]
    public void Test_10(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "reservations": [
    {
      "instances": [
        {
          "foo": 1,
          "bar": 2
        },
        {
          "foo": 1,
          "bar": 3
        },
        {
          "foo": 1,
          "bar": 2
        },
        {
          "foo": 2,
          "bar": 1
        }
      ]
    }
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo[?bar==`1`].bar[0]
""",
"""
[]
""")]
    public void Test_11(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "baz": "other",
  "foo": [
    {
      "bar": 1
    },
    {
      "bar": 2
    },
    {
      "bar": 3
    },
    {
      "bar": 4
    },
    {
      "bar": 1,
      "baz": 2
    }
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo[?a==`1`].b.c
""",
"""
[
  "x",
  "y",
  "z"
]
""")]
    public void Test_12(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": [
    {
      "a": 1,
      "b": {
        "c": "x"
      }
    },
    {
      "a": 1,
      "b": {
        "c": "y"
      }
    },
    {
      "a": 1,
      "b": {
        "c": "z"
      }
    },
    {
      "a": 2,
      "b": {
        "c": "z"
      }
    },
    {
      "a": 1,
      "baz": 2
    }
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo[?name == 'a' || name == 'b']
""",
"""
[
  {
    "name": "a"
  },
  {
    "name": "b"
  }
]
""")]
    [InlineData(
"""
foo[?name == 'a' || name == 'e']
""",
"""
[
  {
    "name": "a"
  }
]
""")]
    [InlineData(
"""
foo[?name == 'a' || name == 'b' || name == 'c']
""",
"""
[
  {
    "name": "a"
  },
  {
    "name": "b"
  },
  {
    "name": "c"
  }
]
""")]
    public void Test_13(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": [
    {
      "name": "a"
    },
    {
      "name": "b"
    },
    {
      "name": "c"
    }
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo[?a == `1` && b == `2`]
""",
"""
[
  {
    "a": 1,
    "b": 2
  }
]
""")]
    [InlineData(
"""
foo[?a == `1` && b == `4`]
""",
"""
[]
""")]
    public void Test_14(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": [
    {
      "a": 1,
      "b": 2
    },
    {
      "a": 1,
      "b": 3
    }
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo[?c == `3` || a == `1` && b == `4`]
""",
"""
[
  {
    "a": 1,
    "b": 2,
    "c": 3
  }
]
""")]
    [InlineData(
"""
foo[?b == `2` || a == `3` && b == `4`]
""",
"""
[
  {
    "a": 1,
    "b": 2,
    "c": 3
  },
  {
    "a": 3,
    "b": 4
  }
]
""")]
    [InlineData(
"""
foo[?a == `3` && b == `4` || b == `2`]
""",
"""
[
  {
    "a": 1,
    "b": 2,
    "c": 3
  },
  {
    "a": 3,
    "b": 4
  }
]
""")]
    [InlineData(
"""
foo[?(a == `3` && b == `4`) || b == `2`]
""",
"""
[
  {
    "a": 1,
    "b": 2,
    "c": 3
  },
  {
    "a": 3,
    "b": 4
  }
]
""")]
    [InlineData(
"""
foo[?((a == `3` && b == `4`)) || b == `2`]
""",
"""
[
  {
    "a": 1,
    "b": 2,
    "c": 3
  },
  {
    "a": 3,
    "b": 4
  }
]
""")]
    [InlineData(
"""
foo[?a == `3` && (b == `4` || b == `2`)]
""",
"""
[
  {
    "a": 3,
    "b": 4
  }
]
""")]
    [InlineData(
"""
foo[?a == `3` && ((b == `4` || b == `2`))]
""",
"""
[
  {
    "a": 3,
    "b": 4
  }
]
""")]
    public void Test_15(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": [
    {
      "a": 1,
      "b": 2,
      "c": 3
    },
    {
      "a": 3,
      "b": 4
    }
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo[?a == `1` || b ==`2` && c == `5`]
""",
"""
[
  {
    "a": 1,
    "b": 2,
    "c": 3
  }
]
""")]
    [InlineData(
"""
foo[?(a == `1` || b ==`2`) && c == `5`]
""",
"""
[]
""")]
    [InlineData(
"""
foo[?!(a == `1` || b ==`2`)]
""",
"""
[
  {
    "a": 3,
    "b": 4
  }
]
""")]
    public void Test_16(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": [
    {
      "a": 1,
      "b": 2,
      "c": 3
    },
    {
      "a": 3,
      "b": 4
    }
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo[?key]
""",
"""
[
  {
    "key": true
  },
  {
    "key": [
      0
    ]
  },
  {
    "key": {
      "a": "b"
    }
  },
  {
    "key": 0
  },
  {
    "key": 1
  }
]
""")]
    [InlineData(
"""
foo[?!key]
""",
"""
[
  {
    "key": false
  },
  {
    "key": []
  },
  {
    "key": {}
  },
  {
    "key": null
  },
  {
    "notkey": true
  }
]
""")]
    [InlineData(
"""
foo[?key == `null`]
""",
"""
[
  {
    "key": null
  },
  {
    "notkey": true
  }
]
""")]
    public void Test_17(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": [
    {
      "key": true
    },
    {
      "key": false
    },
    {
      "key": []
    },
    {
      "key": {}
    },
    {
      "key": [
        0
      ]
    },
    {
      "key": {
        "a": "b"
      }
    },
    {
      "key": 0
    },
    {
      "key": 1
    },
    {
      "key": null
    },
    {
      "notkey": true
    }
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
foo[?@ < `5`]
""",
"""
[
  0,
  1,
  2,
  3,
  4
]
""")]
    [InlineData(
"""
foo[?`5` > @]
""",
"""
[
  0,
  1,
  2,
  3,
  4
]
""")]
    [InlineData(
"""
foo[?@ == @]
""",
"""
[
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9
]
""")]
    public void Test_18(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9
  ]
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

}