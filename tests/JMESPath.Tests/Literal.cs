// <auto-generated /> 
#nullable enable

using JMESPath;

public class Literal
{

    [Theory]
    [InlineData(
"""
`"foo"`
""",
"""
foo
""")]
    [InlineData(
"""
`"\u03a6"`
""",
"""
Œ¶
""")]
    [InlineData(
"""
`"‚úì"`
""",
"""
‚úì
""")]
    [InlineData(
"""
`[1, 2, 3]`
""",
"""
[
  1,
  2,
  3
]
""")]
    [InlineData(
"""
`{"a": "b"}`
""",
"""
{
  "a": "b"
}
""")]
    [InlineData(
"""
`true`
""",
"""
true
""")]
    [InlineData(
"""
`false`
""",
"""
false
""")]
    [InlineData(
"""
`null`
""",
"""

""")]
    [InlineData(
"""
`0`
""",
"""
0
""")]
    [InlineData(
"""
`1`
""",
"""
1
""")]
    [InlineData(
"""
`2`
""",
"""
2
""")]
    [InlineData(
"""
`3`
""",
"""
3
""")]
    [InlineData(
"""
`4`
""",
"""
4
""")]
    [InlineData(
"""
`5`
""",
"""
5
""")]
    [InlineData(
"""
`6`
""",
"""
6
""")]
    [InlineData(
"""
`7`
""",
"""
7
""")]
    [InlineData(
"""
`8`
""",
"""
8
""")]
    [InlineData(
"""
`9`
""",
"""
9
""")]
    [InlineData(
"""
`"foo\`bar"`
""",
"""
foo`bar
""")]
    [InlineData(
"""
`"foo\"bar"`
""",
"""
foo"bar
""")]
    [InlineData(
"""
`"1\`"`
""",
"""
1`
""")]
    [InlineData(
"""
`"\\"`.{a:`"b"`}
""",
"""
{
  "a": "b"
}
""")]
    [InlineData(
"""
`{"a": "b"}`.a
""",
"""
b
""")]
    [InlineData(
"""
`{"a": {"b": "c"}}`.a.b
""",
"""
c
""")]
    [InlineData(
"""
`[0, 1, 2]`[1]
""",
"""
1
""")]
    public void Test_1(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "foo": [
    {
      "name": "a"
    },
    {
      "name": "b"
    }
  ],
  "bar": {
    "baz": "qux"
  }
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
`  {"foo": true}`
""",
"""
{
  "foo": true
}
""")]
    [InlineData(
"""
`{"foo": true}   `
""",
"""
{
  "foo": true
}
""")]
    [InlineData(
"""
foo.`"bar"`
""",
"""

""")]
    public void Test_2(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{
  "type": "object"
}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

    [Theory]
    [InlineData(
"""
'foo'
""",
"""
foo
""")]
    [InlineData(
"""
'  foo  '
""",
"""
  foo  
""")]
    [InlineData(
"""
'0'
""",
"""
0
""")]
    [InlineData(
"""
'newline
'
""",
"""
newline

""")]
    [InlineData(
"""
'
'
""",
"""


""")]
    [InlineData(
"""
'‚úì'
""",
"""
‚úì
""")]
    [InlineData(
"""
'ùÑû'
""",
"""
ùÑû
""")]
    [InlineData(
"""
'  [foo]  '
""",
"""
  [foo]  
""")]
    [InlineData(
"""
'[foo]'
""",
"""
[foo]
""")]
    [InlineData(
"""
'\u03a6'
""",
"""
\u03a6
""")]
    [InlineData(
"""
'foo\'bar'
""",
"""
foo'bar
""")]
    [InlineData(
"""
'\z'
""",
"""
\z
""")]
    [InlineData(
"""
'\\'
""",
"""
\\
""")]
    public void Test_3(string expression, string expectedResult)
    {
        // Arrange 
        string? given =
"""
{}
""";

        // Act 
        string? result = JMESPathSearcher.Search(expression, given);
        
        // Assert
        Assert.Equal(result, expectedResult);
    }

}